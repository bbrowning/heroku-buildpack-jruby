#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
#set -x

logger -p user.notice -t "slugc[$$]" "language_pack_jruby jruby_compile_start"

# clean up leaking environment
unset GIT_DIR

BUILD_DIR=$1
CACHE_DIR=$2
LOGGER_FLAGS=""

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# install JDK 
logger -p user.notice -t "slugc[$$]" "language_pack_jruby download_jdk"
LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
javaVersion=1.7
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
echo "done"

# Remove JDK's logging.properties since it interferes with JBoss
# Logging finding the appropriate one
rm $BUILD_DIR/.jdk/jre/lib/logging.properties

function indent {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function download_jruby_and_install_default_gems {
  if [ ! -d "$CACHE_DIR/jruby-$VERSION" ]; then
    echo "-----> Downloading and unpacking JRuby"
    mkdir -p $CACHE_DIR
    JRUBY_TAR=http://jruby.org.s3.amazonaws.com/downloads/$VERSION/jruby-bin-$VERSION.tar.gz
    curl $JRUBY_TAR -s -o - | tar xzf - -C $CACHE_DIR/
    PATH=$CACHE_DIR/jruby-$VERSION/bin:$PATH

    echo "-----> Installing JRuby-OpenSSL, Bundler and Rake"
    jruby $JRUBY_OPTS -S jgem install jruby-openssl bundler rake | indent 
  fi
}

function copy_jruby_to_build {
  echo "-----> Vendoring JRuby into slug"
  cp -ru $CACHE_DIR/jruby-$VERSION $BUILD_DIR/jruby
  PATH=$BUILD_DIR/jruby/bin:$PATH
}

function get_bundle_cache {
  if [ -d $BUNDLE_CACHE ]; then
    mkdir -p $BUNDLE_DIR
    cp -ru $BUNDLE_CACHE/* $BUNDLE_DIR
  fi
}

function store_bundle_cache {
  mkdir -p $BUNDLE_CACHE
  cp -ru $BUNDLE_DIR/* $BUNDLE_CACHE
}

function bundle_install {
  echo "-----> Installing dependencies with Bundler"

  cd $BUILD_DIR
  jruby $JRUBY_OPTS -r openssl -S bundle install --without development:test --binstubs --deployment --standalone | indent

  echo "Dependencies installed" | indent
}

function bundle_install_with_cache {
  BUNDLE_CACHE=$CACHE_DIR/vendor/bundle
  BUNDLE_DIR=$BUILD_DIR/vendor/bundle

  get_bundle_cache
  bundle_install
  store_bundle_cache
}

function create_database_yml {
  echo "-----> Writing config/database.yml to read from DATABASE_URL"
  mkdir -p $BUILD_DIR/config
  cat > $BUILD_DIR/config/database.yml << EOF
<%
require 'cgi'
require 'uri'

begin
  uri = URI.parse(ENV["DATABASE_URL"])
rescue URI::InvalidURIError
  raise "Invalid DATABASE_URL"
end

raise "No RACK_ENV or RAILS_ENV found" unless ENV["RAILS_ENV"] || ENV["RACK_ENV"]

def attribute(name, value, force_string = false)
  if value
    value_string =
      if force_string
        '"' + value + '"'
      else
        value
      end
    "#{name}: #{value_string}"
  else
    ""
  end
end

adapter = uri.scheme
adapter = "jdbcpostgresql" if adapter == "postgres"
database = (uri.path || "").split("/")[1]
username = uri.user
password = uri.password
host = uri.host
port = uri.port
params = CGI.parse(uri.query || "")
%>

<%= ENV["RAILS_ENV"] || ENV["RACK_ENV"] %>:
  <%= attribute "adapter",  adapter %>
  <%= attribute "database", database %>
  <%= attribute "username", username %>
  <%= attribute "password", password, true %>
  <%= attribute "host",     host %>
  <%= attribute "port",     port %>

<% params.each do |key, value| %>
  <%= key %>: <%= value.first %>
<% end %>
EOF
}

function precompile_assets {
  echo "-----> Precompiling assets"

  cd $BUILD_DIR
  env DATABASE_URL=postgres://user:pass@127.0.0.1/dbname jruby $JRUBY_OPTS -S bin/rake assets:precompile 2>&1 | indent
}

JRUBY_OPTS="--1.9 -J-Xmx400m"
VERSION="1.7.0.preview2"

download_jruby_and_install_default_gems
copy_jruby_to_build
bundle_install_with_cache

create_database_yml
precompile_assets

logger -p user.notice -t "slugc[$$]" "language_pack_jruby jruby_compile_end $LOGGER_FLAGS"

